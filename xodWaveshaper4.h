/*------------------------------------------------------------------------------------------------*/
/* ___::((xodWaveshaper4.h))::___

   ___::((created by eschei))___

	Purpose: header for xodWaveshaper4
	Device: All
	Revision History: June 8, 2018 - initial
	Revision History: July 4, 2018 - version 2
	Revision History: July 5, 2018 - version 3
*/

/*------------------------------------------------------------------------------------------------*/

/*---%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%---*


*---%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%---*/

/*------------------------------------------------------------------------------------------------*/

#ifndef __XODWAVESHAPER4_H__
#define __XODWAVESHAPER4_H__


#include "hls_math.h"
#include "ap_fixed.h"

#include "xodEFXII_types.h"

// *-----------------------------------------------------------------------------------* //
///// waveshaper data types /////////////////////

// **assume using DSP48e1 18x25 Mpy**


// *--- K: "+/- Atan exponent" - range {0.1 - 1024.0}, initial value = 1.0

// defined in xodEFX.h
//typedef ap_ufixed<16,10>  wavshaperCtrl_t;
typedef ap_ufixed<18,3> wavshaperGain_t;


typedef ap_fixed<27,12> atanIn_t;
typedef ap_fixed<27,2> atanOut_t;


// *-----------------------------------------------------------------------------------* //
///// waveshaper gain tables /////////////////////


// atan(x) = a1 * x + a0

const ap_ufixed<27,1> a0[31] = {
								// partition 1
								0.0066074118,			//0 0.498046875
								0.1510420675,			//0.5 0.998046875
								0.3962185158,			//1 1.498046875
								0.6127672027,			//1.5 1.998046875
								0.7762786564,			//2 2.498046875
								0.8975118787,			//2.5 2.998046875
								0.9889649206,			//3 3.498046875
								1.059657894,			//3.5 3.998046875
								1.115617192,			//4 4.498046875
								1.160861296,			//4.5 4.998046875
								1.198120050,			//5 5.498046875
								1.229292639,			//5.5 5.998046875
								1.255732464,			//6 6.498046875
								1.278425955,			//6.5 6.998046875
								1.298106982,			//7 7.498046875
								1.315331726,			//7.5 7.998046875
								// partition 2
								1.337033786,			//8 8.998046875
								1.361365439,			//9 9.998046875
								1.381130108,			//10 10.998046875
								1.397498712,			//11 11.998046875
								1.411274670,			//12 12.998046875
								1.423027181,			//13 13.998046875
								1.433170570,			//14 14.998046875
								1.442013495,			//15 15.998046875
								// partition 3
								1.458876764,			//16 19.998046875
								1.479444277,			//20 23.998046875
								1.493604651,			//24 27.998046875
								1.503954606,			//28 31.998046875
								// partition 4
								1.535650621,			//32 127.998046875
								// partition 5
								1.562007421,			//128 511.998046875
								// partition 6
								1.569731539};			//512 262144.998046875


const ap_ufixed<31,0> a1[31] = {
								// partition 1
								0.9277919644,			//0 0.498046875
								0.6440619421,			//0.5 0.998046875
								0.3951315951,			//1 1.498046875
								0.2489003955,			//1.5 1.998046875
								0.1663932813,			//2 2.498046875
								0.1175800886,			//2.5 2.998046875
								0.08694646189,			//3 3.498046875
								0.06667254635,			//3.5 3.998046875
								0.05264116530,			//4 4.498046875
								0.04256273588,			//4.5 4.998046875
								0.03509617155,			//5 5.498046875
								0.02941895478,			//5.5 5.998046875
								0.02500603342,			//6 6.498046875
								0.02151042632,			//6.5 6.998046875
								0.01869582628,			//7 7.498046875
								0.01639701574,			//7.5 7.998046875
								// partition 2
								0.01370070886,			//8 8. .998046875
								0.01099069327,			//9 9. .998046875
								0.00901035158,			//10 10.998046875
								0.007519870550,			//11 11.998046875
								0.006370291906,			//12 12.998046875
								0.005465184955,			//13 13.998046875
								0.004739915389,			//14 14.998046875
								0.004149858339,			//15 15.998046875
								// partition 3
								0.003115406985,			//16 19.998046875
								0.002079123042,			//20 23.998046875
								0.001485970118,			//24 27.998046875
								0.001114887790,			//28 31.998046875
								// partition 4
								0.0002440401021,		//32 127.998046875
								// partition 5
								0.00001525843983,		//128 511.998046875
								// partition 6
								0.00000000745054};		//512 262144.998046875



// Original Gain Table

//const gain_t wsGainTbl[32] = {
//								// partition 1
//								4.08198815,		// unused
//								4.08198815,		// lower limit - 0.25
//								2.15681043,
//								1.55399888,
//								1.27323954,
//								1.11600244,
//								1.01750752,
//								0.95088651,
//								0.90322103,
//								0.86762476,
//								0.84013143,
//								0.81831365,
//								0.80061117,
//								0.78597976,
//								0.77369639,
//								0.76324579,
//								// partition 2
//								0.75425153,
//								0.73957529,
//								0.72811959,
//								0.71893681,
//								0.71141584,
//								0.70514552,
//								0.69983939,
//								0.69529193,
//								// partition 3
//								0.69135193,
//								0.67975065,
//								0.67219882,
//								0.66689392,
//								// partition 4
//								0.66296401,
//								// partition 5
//								0.64301544,
//								// partition 6
//								0.63820685,
//								//else
//								0.6374};


// Gain Attenuation table (pseudo aural empirical ?@?)
// import numpy as np
// import matplotlib.pyplot as plt
//
// x = np.linspace(1, 256)
// y = 1/(4 * np.arctan(x)**2)
// plt.plot(x, y)
//
// define wsGain table partition 1:
// xPartition1_linspace = np.linspace(0, 15, 16)
// z1 = xPartition1_linspace*0.5 + 0.25
// wsGainTbl_part1 = 1/(4 * np.arctan(z1)**2)
//
// z1 = array([0.25, 0.75, 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5.25,
//        5.75, 6.25, 6.75, 7.25, 7.75])
//
// wsGainTbl_part1 = array([4.16565682, 0.60372813, 0.31136536, 0.22604629, 0.18819318,
//							0.16740931, 0.15444105, 0.14563603, 0.13929041, 0.13451078,
//							0.13078644, 0.1278055 , 0.12536718, 0.12333663, 0.12162005,
//							0.12015022])
//
//
// define wsGain table partition 2:
// xPartition2_linspace = np.linspace(8, 15, 8)
// z2 = xPartition2_linspace + 0.5
// wsGainTbl_part2 = 1/(4 * np.arctan(z2)**2)
//
// z2 = array([ 8.5,  9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5])
//
// wsGainTbl_part2 = array([0.11830357, 0.11633753, 0.11477802, 0.11351108, 0.11246162,
//							0.11157817, 0.11082428, 0.11017346])
//
//
// define wsGain table partition 3:
// xPartition3_linspace = np.linspace(0, 3, 4)
// z3 = xPartition3_linspace * 4 + 16 + 2
// wsGainTbl_part3 = 1/(4 * np.arctan(z3)**2)
//
// z3 = array([18., 22., 26., 30.])
//
// wsGainTbl_part3 = array([0.10887897, 0.10744541, 0.10646870, 0.10576055])
//
//
// define wsGain table partition 4: 32-128 -> median = 80
// wsGainTbl_part4 = 1/(4 * np.arctan(80)**2) = 0.10295313
//
// define wsGain table partition 5: 128 512 -> median = 320
// wsGainTbl_part5 = 1/(4 * np.arctan(320)**2) = 0.10172553
//
// define wsGain table partition 6: 512+ -> median = 1024
// wsGainTbl_part6 = 1/(4 * np.arctan(1024)**2) = 0.10144728


const wavshaperGain_t wsGainTbl[32] = {
								// partition 1
								4.16565682,		// 1/(2.5 * np.arctan(x[.])**2)
								0.60372813,		// ...
								0.31136536,		// ...
								0.22604629,
								0.18819318,
								0.16740931,
								0.15444105,
								0.14563603,
								0.13929041,
								0.13451078,
								0.13078644,
								0.12780550,
								0.12536718,
								0.12333663,
								0.12162005,
								0.12015022,
								// partition 2
								0.11830357,
								0.11633753,
								0.11477802,
								0.11351108,
								0.11246162,
								0.11157817,
								0.11082428,
								0.11017346,
								// partition 3
								0.10887897,
								0.10744541,
								0.10646870,
								0.10576055,
								// partition 4
								0.10295313,
								// partition 5
								0.10172553,
								// partition 6
								0.10144728,

								//else
								0.10144728};



//// Gain Attenuation table (pseudo aural empirical ?@?)
//// import numpy as np
//// import matplotlib.pyplot as plt
////
//// x = np.linspace(1, 256)
//// y = 1/(2.5 * np.arctan(x)**2)
//// plt.plot(x, y)
////
//// define wsGain table partition 1:
//// xPartition1_linspace = np.linspace(0, 15, 16)
//// z1 = xPartition1_linspace*0.5 + 0.25
//// wsGainTbl_part1 = 1/(2.5 * np.arctan(z1)**2)
////
//// z1 = array([0.25, 0.75, 1.25, 1.75, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5.25,
////        5.75, 6.25, 6.75, 7.25, 7.75])
////
//// wsGainTbl_part1 = array([6.6650509 , 0.965965  , 0.49818458, 0.36167406, 0.30110909,
////							0.26785489, 0.24710567, 0.23301765, 0.22286466, 0.21521724,
////							0.20925831, 0.2044888 , 0.20058748, 0.19733861, 0.19459208,
////							0.19224035])
//// ** replace [0] entry w/ '2.0' - calm shit down..
////
////
//// define wsGain table partition 2:
//// xPartition2_linspace = np.linspace(8, 15, 8)
//// z2 = xPartition2_linspace + 0.5
//// wsGainTbl_part2 = 1/(2.5 * np.arctan(z2)**2)
////
//// z2 = array([ 8.5,  9.5, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5])
////
//// wsGainTbl_part2 = array([0.18928571, 0.18614004, 0.18364483, 0.18161773, 0.17993859,
////		   					0.17852506, 0.17731885, 0.17627754])
////
////
//// define wsGain table partition 3:
//// xPartition3_linspace = np.linspace(0, 3, 4)
//// z3 = xPartition3_linspace * 4 + 16 + 2
//// wsGainTbl_part3 = 1/(2.5 * np.arctan(z3)**2)
////
//// z3 = array([18., 22., 26., 30.])
////
//// wsGainTbl_part3 = array([0.17420635, 0.17191266, 0.17034992, 0.16921688])
////
////
//// define wsGain table partition 4: 32-128 -> median = 80
//// wsGainTbl_part4 = 1/(2.5 * np.arctan(80)**2) = 0.16472505
////
//// define wsGain table partition 5: 128 512 -> median = 320
//// wsGainTbl_part5 = 1/(2.5 * np.arctan(320)**2) = 0.16276085
////
//// define wsGain table partition 6: 512+ -> median = 1024
//// wsGainTbl_part6 = 1/(2.5 * np.arctan(1024)**2) = 0.16231565
//
//
//const gain_t wsGainTbl[32] = {
//								// partition 1
//								3.0,			// replaced (highly non-linear)
//								0.965965,		// 1/(2.5 * np.arctan(x[.])**2)
//								0.49818458,		// ...
//								0.36167406,
//								0.30110909,
//								0.26785489,
//								0.24710567,
//								0.23301765,
//								0.22286466,
//								0.21521724,
//								0.20925831,
//								0.2044888,
//								0.20058748,
//								0.19733861,
//								0.19459208,
//								0.19224035,
//								// partition 2
//								0.18928571,
//								0.18614004,
//								0.18364483,
//								0.18161773,
//								0.17993859,
//								0.17852506,
//								0.17731885,
//								0.17627754,
//								// partition 3
//								0.17420635,
//								0.17191266,
//								0.17034992,
//								0.16921688,
//								// partition 4
//								0.16472505,
//								// partition 5
//								0.16276085,
//								// partition 6
//								0.16231565,
//
//								//else
//								0.16231565};


// *--------------------------------------------------------* //
// *--- linear interpolation ---* //

//template <class T, class F>
//T linInterpolate(T dataLow, T dataHigh, F fractional)
//{
//	T linInterpOut;
//	linInterpOut = dataLow + (dataHigh - dataLow) * fractional;
//	return linInterpOut;
//}


// *--------------------------------------------------------* //
// *--- xodWaveshaper4 HLS Model ---* //
//
// *--- K: "+/- Atan exponent" - range {0.1 - 20.0}, initial value = 1.0

class xodWaveshaper4 {

public:

	void advance(wavshaperCtrl_t wsGain, stereoData_t waveshaperIn,
			     stereoData_t& waveshaperOut);

};

#endif // __XODWAVESHAPER4_H__
