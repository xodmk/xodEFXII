/*------------------------------------------------------------------------------------------------*/
/* ___::((xodSsbHilbertMod.h))::___

   ___::((JIROBATA Programming Industries))::___
   ___::((XODMK:2018:2022))::___
   ___::((created by eschei))___

	Purpose: header for ssbHilbertMod - Single Side-band Modulation with Hilbert Transformer
	Device: All
	Revision History: July 14, 2017 - initial
	Revision History: May 12, 2018 - version 2
	Revision History: 2022-02-5 - xodmk
*/

/*------------------------------------------------------------------------------------------------*/

/*---%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%---*
*---%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%---*/

/*------------------------------------------------------------------------------------------------*/

#ifndef __XODSSBHILBERTMOD_H__
#define __XODSSBHILBERTMOD_H__

#include <math.h>
#include <ap_int.h>
#include "hls_stream.h"
#include "ap_shift_reg.h"

#include "SinCos.h"
#include "xodEFX.h"


using namespace std;

// *-----------------------------------------------------------------------------------* //
///// definitions /////////////////////



// *-----------------------------------------------------------------------------------* //
///// main types /////////////////////


//struct ssbData_t {
//	data_t dataCH1;
//	data_t dataCH2;
//};

struct ssbInternal_t {
	data_t delayCH1;
	data_t delayCH2;
	data_t filterCH1;
	data_t filterCH2;
};


// *-----------------------------------------------------------------------------------* //
///// filter data types /////////////////////


// **assume using DSP48e1 18x25 Mpy**

const unsigned int firDataWidth = dataWidth;
const unsigned int coefWidth = 18;
const unsigned int firBitGrowth = 2;			// from pythonFIR.py

//typedef ap_fixed<18,2>	coef_t;
//typedef ap_ufixed<18,0>  gain_t;
//typedef ap_fixed<32,3>	acc_t;
//typedef ap_fixed<24,2>	inData_t;
//typedef ap_fixed<32,3>  outData_t;

typedef ap_fixed<coefWidth, 2>	coef_t;
typedef ap_ufixed<coefWidth, 2>  gain_t;
typedef ap_fixed<firDataWidth, 2>	inDataFIR_t;
typedef ap_fixed<firDataWidth + coefWidth, 2 + firBitGrowth>	acc_t;
typedef ap_fixed<firDataWidth, 2>  outDataFIR_t;


// Example2: 99 tap Hilbert FIR
const unsigned int numCoef = 369;				// should match pythonFIR.py parameters
const unsigned int centerTapDly = 184;			// position of center FIR Coefficient
//const gain_t firGain = 2.63448870847;
//const gain_t firGainInv = 0.37958029456909603;


struct inStereoFIR_t {
	inDataFIR_t dataCH1;
	inDataFIR_t dataCH2;
};

struct outStereoFIR_t {
	outDataFIR_t dataCH1;
	outDataFIR_t dataCH2;
};

struct sclStereoFIR_t {
	inDataFIR_t dataCH1;
	inDataFIR_t dataCH2;
};


// *-----------------------------------------------------------------------------------* //
///// hilbert FIR coefficient /////////////////////


/* FIR Coefficients generated using Python+Scipy (ssbHilbertMod.py) :
 * fHilbert=sp.signal.remez(99, [0.03, 0.47],[1], type='hilbert'); */

// Example - current design reads coefficients from .dat file
const coef_t hilbertCoef[numCoef] = {
		-0.0000027971672683,    0.0005668243045958,    0.0000021582674063,    0.0001440592899448,
		-0.0000000428581538,    0.0001622322743151,    -0.0000001042761430,    0.0001818708019650,
		-0.0000001607895767,    0.0002029979926012,    -0.0000001809999381,    0.0002256499142878,
		-0.0000001449098678,    0.0002498371451223,    -0.0000000796812276,    0.0002756082372421,
		-0.0000000506216023,    0.0003031217699056,    -0.0000001073899354,    0.0003326199643021,
		-0.0000002129872611,    0.0003643020827049,    -0.0000002052287741,    0.0003980697354330,
		0.0000000278900410,    0.0004335176928815,    0.0000001614927666,    0.0004708128391678,
		-0.0000004172634266,    0.0005115933884211,    0.0000000176787297,    0.0005536546622183,
		-0.0000001849469051,    0.0005986339809044,    -0.0000001371644143,    0.0006460536769266,
		-0.0000001215104853,    0.0006961208478517,    -0.0000001442285457,    0.0007489641395459,
		-0.0000001957557257,    0.0008047153456476,    -0.0000002180297631,    0.0008634755835951,
		-0.0000001665246477,    0.0009253245232310,    -0.0000000903703109,    0.0009903630339033,
		-0.0000001238926573,    0.0010587584496290,    -0.0000002408342631,    0.0011306657168229,
		-0.0000002010973113,    0.0012061247054804,    -0.0000000771212112,    0.0012852483193891,
		-0.0000002892183437,    0.0013683155959127,    -0.0000001435241686,    0.0014553239574353,
		-0.0000002449177181,    0.0015465017506511,    -0.0000002655054130,    0.0016419839245538,
		-0.0000002654202343,    0.0017419529101161,    -0.0000002384163353,    0.0018465928236920,
		-0.0000002259836788,    0.0019560890778418,    -0.0000002528141455,    0.0020706198898401,
		-0.0000002727517867,    0.0021903836179706,    -0.0000002270017753,    0.0023156250725059,
		-0.0000001904785508,    0.0024465768743472,    -0.0000002349089495,    0.0025834376087981,
		-0.0000002376930646,    0.0027264756485976,    -0.0000001873921894,    0.0028760147192473,
		-0.0000002812905273,    0.0030322200492974,    -0.0000002276024032,    0.0031955621147827,
		-0.0000002502466326,    0.0033662963043093,    -0.0000002606048313,    0.0035448023583031,
		-0.0000002769235368,    0.0037314620501271,    -0.0000002758829953,    0.0039267185318265,
		-0.0000002555715887,    0.0041310754093512,    -0.0000002445359290,    0.0043450290868452,
		-0.0000002483329736,    0.0045690930680355,    -0.0000002293829791,    0.0048039148431990,
		-0.0000001996153404,    0.0050501892299286,    -0.0000002005116227,    0.0053085881592326,
		-0.0000001941043677,    0.0055799597895743,    -0.0000001700015219,    0.0058652866115900,
		-0.0000001878836658,    0.0061653954641234,    -0.0000001765279505,    0.0064815477950166,
		-0.0000001806470858,    0.0068149450004986,    -0.0000001828037111,    0.0071670211602779,
		-0.0000001890179551,    0.0075393491459137,    -0.0000001885961077,    0.0079337018826826,
		-0.0000001828152179,    0.0083521589906808,    -0.0000001766524286,    0.0087970647057614,
		-0.0000001703017550,    0.0092710485425240,    -0.0000001664322980,    0.0097772209309617,
		-0.0000001592767069,    0.0103191830259970,    -0.0000001418591055,    0.0109010210861351,
		-0.0000001292084045,    0.0115276201369778,    -0.0000001351147310,    0.0122048043128822,
		-0.0000001254663478,    0.0129392736083207,    -0.0000001221494056,    0.0137392432812105,
		-0.0000001147145879,    0.0146145135754718,    -0.0000001079311634,    0.0155770652104650,
		-0.0000001114351109,    0.0166416128366098,    -0.0000001018156858,    0.0178264088528772,
		-0.0000001001025044,    0.0191544835985757,    -0.0000001014470290,    0.0206552259780350,
		-0.0000000808453104,    0.0223666966440739,    -0.0000000758199709,    0.0243392053813132,
		-0.0000000955186754,    0.0266405939341388,    -0.0000000870880452,    0.0293644914826645,
		-0.0000000712238573,    0.0326440240251014,    -0.0000000900373882,    0.0366750432945206,
		-0.0000000835031541,    0.0417577850953297,    -0.0000000895148496,    0.0483773634580267,
		-0.0000000888573772,    0.0573717000755485,    -0.0000000764996608,    0.0703236305613659,
		-0.0000000788050472,    0.0906250084654276,    -0.0000000510262652,    0.1270947385235992,
		-0.0000000360010810,    0.2120689964166065,    -0.0000000371645557,    0.6365738967733989,
		0.0000000000000000,    -0.6365738967733989,    0.0000000371645557,    -0.2120689964166065,
		0.0000000360010810,    -0.1270947385235992,    0.0000000510262652,    -0.0906250084654276,
		0.0000000788050472,    -0.0703236305613659,    0.0000000764996608,    -0.0573717000755485,
		0.0000000888573772,    -0.0483773634580267,    0.0000000895148496,    -0.0417577850953297,
		0.0000000835031541,    -0.0366750432945206,    0.0000000900373882,    -0.0326440240251014,
		0.0000000712238573,    -0.0293644914826645,    0.0000000870880452,    -0.0266405939341388,
		0.0000000955186754,    -0.0243392053813132,    0.0000000758199709,    -0.0223666966440739,
		0.0000000808453104,    -0.0206552259780350,    0.0000001014470290,    -0.0191544835985757,
		0.0000001001025044,    -0.0178264088528772,    0.0000001018156858,    -0.0166416128366098,
		0.0000001114351109,    -0.0155770652104650,    0.0000001079311634,    -0.0146145135754718,
		0.0000001147145879,    -0.0137392432812105,    0.0000001221494056,    -0.0129392736083207,
		0.0000001254663478,    -0.0122048043128822,    0.0000001351147310,    -0.0115276201369778,
		0.0000001292084045,    -0.0109010210861351,    0.0000001418591055,    -0.0103191830259970,
		0.0000001592767069,    -0.0097772209309617,    0.0000001664322980,    -0.0092710485425240,
		0.0000001703017550,    -0.0087970647057614,    0.0000001766524286,    -0.0083521589906808,
		0.0000001828152179,    -0.0079337018826826,    0.0000001885961077,    -0.0075393491459137,
		0.0000001890179551,    -0.0071670211602779,    0.0000001828037111,    -0.0068149450004986,
		0.0000001806470858,    -0.0064815477950166,    0.0000001765279505,    -0.0061653954641234,
		0.0000001878836658,    -0.0058652866115900,    0.0000001700015219,    -0.0055799597895743,
		0.0000001941043677,    -0.0053085881592326,    0.0000002005116227,    -0.0050501892299286,
		0.0000001996153404,    -0.0048039148431990,    0.0000002293829791,    -0.0045690930680355,
		0.0000002483329736,    -0.0043450290868452,    0.0000002445359290,    -0.0041310754093512,
		0.0000002555715887,    -0.0039267185318265,    0.0000002758829953,    -0.0037314620501271,
		0.0000002769235368,    -0.0035448023583031,    0.0000002606048313,    -0.0033662963043093,
		0.0000002502466326,    -0.0031955621147827,    0.0000002276024032,    -0.0030322200492974,
		0.0000002812905273,    -0.0028760147192473,    0.0000001873921894,    -0.0027264756485976,
		0.0000002376930646,    -0.0025834376087981,    0.0000002349089495,    -0.0024465768743472,
		0.0000001904785508,    -0.0023156250725059,    0.0000002270017753,    -0.0021903836179706,
		0.0000002727517867,    -0.0020706198898401,    0.0000002528141455,    -0.0019560890778418,
		0.0000002259836788,    -0.0018465928236920,    0.0000002384163353,    -0.0017419529101161,
		0.0000002654202343,    -0.0016419839245538,    0.0000002655054130,    -0.0015465017506511,
		0.0000002449177181,    -0.0014553239574353,    0.0000001435241686,    -0.0013683155959127,
		0.0000002892183437,    -0.0012852483193891,    0.0000000771212112,    -0.0012061247054804,
		0.0000002010973113,    -0.0011306657168229,    0.0000002408342631,    -0.0010587584496290,
		0.0000001238926573,    -0.0009903630339033,    0.0000000903703109,    -0.0009253245232310,
		0.0000001665246477,    -0.0008634755835951,    0.0000002180297631,    -0.0008047153456476,
		0.0000001957557257,    -0.0007489641395459,    0.0000001442285457,    -0.0006961208478517,
		0.0000001215104853,    -0.0006460536769266,    0.0000001371644143,    -0.0005986339809044,
		0.0000001849469051,    -0.0005536546622183,    -0.0000000176787297,    -0.0005115933884211,
		0.0000004172634266,    -0.0004708128391678,    -0.0000001614927666,    -0.0004335176928815,
		-0.0000000278900410,    -0.0003980697354330,    0.0000002052287741,    -0.0003643020827049,
		0.0000002129872611,    -0.0003326199643021,    0.0000001073899354,    -0.0003031217699056,
		0.0000000506216023,    -0.0002756082372421,    0.0000000796812276,    -0.0002498371451223,
		0.0000001449098678,    -0.0002256499142878,    0.0000001809999381,    -0.0002029979926012,
		0.0000001607895767,    -0.0001818708019650,    0.0000001042761430,    -0.0001622322743151,
		0.0000000428581538,    -0.0001440592899448,    -0.0000021582674063,    -0.0005668243045958,
		0.0000027971672683
};


//// calculate worst case bit-growth
//static double firCoefAcc = 0;
//double firBitGrowth = 0;
//
//for (i=0;i<numCoef;i++) {
//
//	if (hilbertCoef[i] < 0) {
//		firCoefAcc+=(double)-hilbertCoef[i];
//	} else {
//		firCoefAcc+=(double)hilbertCoef[i];
//	}
//	//fprintf(stdout,"taps[%4d]=%10.7f\n", i, firCoef_fx[i].to_double());
//}
//
//firBitGrowth = ceil(log2(firCoefAcc));
//std::cout<<"fir coef accumulation = "<<firCoefAcc<<std::endl;
//fprintf(stdout,"worst case output bit-growth = %f\n",firBitGrowth);


// *-----------------------------------------------------------------------------------* //
///// Stereo Fir filter used for Hilbert Transform /////////////////////

class stereoFir {

	acc_t acc_L, acc_R;
	acc_t mult_L, mult_R;

public:
	stereoFir() {
		acc_L=0;
		acc_R=0;
	}

	outStereoFIR_t advance(inStereoFIR_t firIn);

};


//// *-----------------------------------------------------------------------------------* //
/////// complex DDS /////////////////////
//
//template <int dataWidth=24, int phaseWidth=36, int lutAddrWidth=7>
//class complexDDS {
//
////	typedef ap_uint<phaseWidth> phaseType;			// phase increment type
////	typedef ap_fixed<dataWidth,2> dataType;			// DDS OSC1 output
////
////	struct cmplxType {
////		dataType real;
////		dataType imag;
////	};
//
//	ddsPhase_t phase;
//	ddsPhase_t step;
//	ddsPhase_t offset;
//
//	SinCos<ddsData_t, dataWidth, phaseWidth, lutAddrWidth> sc;
//
//public:
//	complexDDS() {
//		step = 1; //Just a random number
//		offset = 0;
//
//	}
//
//	void reset() { phase = 0; }
//
//	void set_step(ddsPhase_t x) { step = x; }
//
//	void set_offset(ddsPhase_t x) { offset = x; }
//
//	cmplx_t advance() {
////#pragma HLS RESOURCE variable=phase core=AddSub_DSP
//
//		pair<ddsData_t, ddsData_t> sinCosOut;
//		cmplx_t ddsOut;
//
//		ap_uint<phaseWidth + 1> phaseNormCoef = 1;
//		phaseNormCoef<<=phaseWidth;
//
//		sinCosOut = sc.sin_taylor(phase + offset);
//		ddsOut.real = sinCosOut.first;
//		ddsOut.imag = sinCosOut.second;
//		phase += step;
//
//		return ddsOut;
//	}
//
//};


// *-----------------------------------------------------------------------------------* //
///// Single Side-band Hilbert Transform Modulator /////////////////////

class ssbHilbertMod {

	stereoFir hilbertFIR;
	ComplexDDS<ddsDataWidth, ddsPhaseWidth, ddsLutAddrWidth> oscDds;

	ddsPhase_t freqCtrl;

public:
	ssbHilbertMod() {
		freqCtrl = 1; //Just a random number
	}

	// is reset necessary? If not remove,...
//	void reset() {
//		freqCtrl=0;
//	}

	stereoData_t advance(stereoData_t ssbIn, ddsPhase_t freqCtrl);
};



#endif // SSBHILBERTMOD_H
